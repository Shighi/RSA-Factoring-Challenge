#!/usr/bin/python3
import sys
import time
import random
import math

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def pollard_rho(n):
    if n % 2 == 0:
        return 2
    x = random.randint(1, n-1)
    y = x
    c = random.randint(1, n-1)
    d = 1
    f = lambda x: (pow(x, 2, n) + c) % n
    while d == 1:
        x = f(x)
        y = f(f(y))
        d = gcd(abs(x-y), n)
        if d == n:
            return None
    return d

def miller_rabin(n, k=40):
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    r, s = 0, n - 1
    while s % 2 == 0:
        r += 1
        s //= 2
    for _ in range(k):
        a = random.randrange(2, n - 1)
        x = pow(a, s, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True

def isqrt(n):
    x = n
    y = (x + 1) // 2
    while y < x:
        x = y
        y = (x + n // x) // 2
    return x

def fermat_factor(n):
    a = isqrt(n)
    b2 = a*a - n
    b = isqrt(n)
    count = 0
    while b*b != b2:
        a = a + 1
        b2 = a*a - n
        b = isqrt(b2)
        count += 1
        if count == 1000:
            return None
    p = a+b
    q = a-b
    return p, q

def factorize(n, time_limit):
    start_time = time.time()
    if n % 2 == 0:
        return 2, n // 2
    if miller_rabin(n):
        return n, 1

    while time.time() - start_time < time_limit:
        # Try Fermat factorization first
        result = fermat_factor(n)
        if result:
            p, q = result
            if p != 1 and q != 1:
                return p, q

        # If Fermat fails, try Pollard's rho
        factor = pollard_rho(n)
        if factor:
            return factor, n // factor

    return None

if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit()

    try:
        with open(sys.argv[1], 'r') as file:
            number = int(file.readline().strip())
    except (IOError, ValueError):
        exit()

    result = factorize(number, 4.9)  # 4.9 second time limit

    if result:
        p, q = result
        if p > q:
            p, q = q, p
        print(f"{number}={q}*{p}")
    else:
        print("0")  # Couldn't factor in time
